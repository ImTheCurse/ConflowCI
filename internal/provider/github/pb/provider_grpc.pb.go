// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/github/provider.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GithubProvider_Clone_FullMethodName          = "/github.GithubProvider/Clone"
	GithubProvider_Fetch_FullMethodName          = "/github.GithubProvider/Fetch"
	GithubProvider_CreateWorkTree_FullMethodName = "/github.GithubProvider/CreateWorkTree"
	GithubProvider_RemoveWorkTree_FullMethodName = "/github.GithubProvider/RemoveWorkTree"
)

// GithubProviderClient is the client API for GithubProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GithubProviderClient interface {
	Clone(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
	Fetch(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
	CreateWorkTree(ctx context.Context, in *WorkTreeRequest, opts ...grpc.CallOption) (*SyncResponse, error)
	RemoveWorkTree(ctx context.Context, in *WorkTreeRequest, opts ...grpc.CallOption) (*SyncResponse, error)
}

type githubProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewGithubProviderClient(cc grpc.ClientConnInterface) GithubProviderClient {
	return &githubProviderClient{cc}
}

func (c *githubProviderClient) Clone(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, GithubProvider_Clone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubProviderClient) Fetch(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, GithubProvider_Fetch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubProviderClient) CreateWorkTree(ctx context.Context, in *WorkTreeRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, GithubProvider_CreateWorkTree_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubProviderClient) RemoveWorkTree(ctx context.Context, in *WorkTreeRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, GithubProvider_RemoveWorkTree_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GithubProviderServer is the server API for GithubProvider service.
// All implementations should embed UnimplementedGithubProviderServer
// for forward compatibility.
type GithubProviderServer interface {
	Clone(context.Context, *SyncRequest) (*SyncResponse, error)
	Fetch(context.Context, *SyncRequest) (*SyncResponse, error)
	CreateWorkTree(context.Context, *WorkTreeRequest) (*SyncResponse, error)
	RemoveWorkTree(context.Context, *WorkTreeRequest) (*SyncResponse, error)
}

// UnimplementedGithubProviderServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGithubProviderServer struct{}

func (UnimplementedGithubProviderServer) Clone(context.Context, *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clone not implemented")
}
func (UnimplementedGithubProviderServer) Fetch(context.Context, *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedGithubProviderServer) CreateWorkTree(context.Context, *WorkTreeRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkTree not implemented")
}
func (UnimplementedGithubProviderServer) RemoveWorkTree(context.Context, *WorkTreeRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWorkTree not implemented")
}
func (UnimplementedGithubProviderServer) testEmbeddedByValue() {}

// UnsafeGithubProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GithubProviderServer will
// result in compilation errors.
type UnsafeGithubProviderServer interface {
	mustEmbedUnimplementedGithubProviderServer()
}

func RegisterGithubProviderServer(s grpc.ServiceRegistrar, srv GithubProviderServer) {
	// If the following call pancis, it indicates UnimplementedGithubProviderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GithubProvider_ServiceDesc, srv)
}

func _GithubProvider_Clone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubProviderServer).Clone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GithubProvider_Clone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubProviderServer).Clone(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GithubProvider_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubProviderServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GithubProvider_Fetch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubProviderServer).Fetch(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GithubProvider_CreateWorkTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubProviderServer).CreateWorkTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GithubProvider_CreateWorkTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubProviderServer).CreateWorkTree(ctx, req.(*WorkTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GithubProvider_RemoveWorkTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubProviderServer).RemoveWorkTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GithubProvider_RemoveWorkTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubProviderServer).RemoveWorkTree(ctx, req.(*WorkTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GithubProvider_ServiceDesc is the grpc.ServiceDesc for GithubProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GithubProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.GithubProvider",
	HandlerType: (*GithubProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Clone",
			Handler:    _GithubProvider_Clone_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _GithubProvider_Fetch_Handler,
		},
		{
			MethodName: "CreateWorkTree",
			Handler:    _GithubProvider_CreateWorkTree_Handler,
		},
		{
			MethodName: "RemoveWorkTree",
			Handler:    _GithubProvider_RemoveWorkTree_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/github/provider.proto",
}
