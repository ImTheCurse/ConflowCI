// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: sync/build.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WorkerBuilder_BuildRepository_FullMethodName           = "/sync.WorkerBuilder/BuildRepository"
	WorkerBuilder_RemoveRepositoryWorkspace_FullMethodName = "/sync.WorkerBuilder/RemoveRepositoryWorkspace"
)

// WorkerBuilderClient is the client API for WorkerBuilder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerBuilderClient interface {
	BuildRepository(ctx context.Context, in *WorkerConfig, opts ...grpc.CallOption) (*WorkerBuildOutput, error)
	RemoveRepositoryWorkspace(ctx context.Context, in *WorkerConfig, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type workerBuilderClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerBuilderClient(cc grpc.ClientConnInterface) WorkerBuilderClient {
	return &workerBuilderClient{cc}
}

func (c *workerBuilderClient) BuildRepository(ctx context.Context, in *WorkerConfig, opts ...grpc.CallOption) (*WorkerBuildOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkerBuildOutput)
	err := c.cc.Invoke(ctx, WorkerBuilder_BuildRepository_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerBuilderClient) RemoveRepositoryWorkspace(ctx context.Context, in *WorkerConfig, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WorkerBuilder_RemoveRepositoryWorkspace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerBuilderServer is the server API for WorkerBuilder service.
// All implementations should embed UnimplementedWorkerBuilderServer
// for forward compatibility.
type WorkerBuilderServer interface {
	BuildRepository(context.Context, *WorkerConfig) (*WorkerBuildOutput, error)
	RemoveRepositoryWorkspace(context.Context, *WorkerConfig) (*emptypb.Empty, error)
}

// UnimplementedWorkerBuilderServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorkerBuilderServer struct{}

func (UnimplementedWorkerBuilderServer) BuildRepository(context.Context, *WorkerConfig) (*WorkerBuildOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildRepository not implemented")
}
func (UnimplementedWorkerBuilderServer) RemoveRepositoryWorkspace(context.Context, *WorkerConfig) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRepositoryWorkspace not implemented")
}
func (UnimplementedWorkerBuilderServer) testEmbeddedByValue() {}

// UnsafeWorkerBuilderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerBuilderServer will
// result in compilation errors.
type UnsafeWorkerBuilderServer interface {
	mustEmbedUnimplementedWorkerBuilderServer()
}

func RegisterWorkerBuilderServer(s grpc.ServiceRegistrar, srv WorkerBuilderServer) {
	// If the following call pancis, it indicates UnimplementedWorkerBuilderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WorkerBuilder_ServiceDesc, srv)
}

func _WorkerBuilder_BuildRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerBuilderServer).BuildRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkerBuilder_BuildRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerBuilderServer).BuildRepository(ctx, req.(*WorkerConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerBuilder_RemoveRepositoryWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerBuilderServer).RemoveRepositoryWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkerBuilder_RemoveRepositoryWorkspace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerBuilderServer).RemoveRepositoryWorkspace(ctx, req.(*WorkerConfig))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkerBuilder_ServiceDesc is the grpc.ServiceDesc for WorkerBuilder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkerBuilder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sync.WorkerBuilder",
	HandlerType: (*WorkerBuilderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuildRepository",
			Handler:    _WorkerBuilder_BuildRepository_Handler,
		},
		{
			MethodName: "RemoveRepositoryWorkspace",
			Handler:    _WorkerBuilder_RemoveRepositoryWorkspace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sync/build.proto",
}
